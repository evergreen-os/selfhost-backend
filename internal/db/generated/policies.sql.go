// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: policies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPolicy = `-- name: CreatePolicy :one
INSERT INTO policies (
    policy_id,
    tenant_id,
    name,
    version_timestamp,
    policy_bundle,
    signature,
    signing_key_id,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, policy_id, tenant_id, name, version_timestamp, policy_bundle, signature, signing_key_id, created_at, created_by
`

type CreatePolicyParams struct {
	PolicyID         string             `json:"policy_id"`
	TenantID         pgtype.UUID        `json:"tenant_id"`
	Name             string             `json:"name"`
	VersionTimestamp pgtype.Timestamptz `json:"version_timestamp"`
	PolicyBundle     []byte             `json:"policy_bundle"`
	Signature        *string            `json:"signature"`
	SigningKeyID     *string            `json:"signing_key_id"`
	CreatedBy        pgtype.UUID        `json:"created_by"`
}

func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, createPolicy,
		arg.PolicyID,
		arg.TenantID,
		arg.Name,
		arg.VersionTimestamp,
		arg.PolicyBundle,
		arg.Signature,
		arg.SigningKeyID,
		arg.CreatedBy,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.PolicyID,
		&i.TenantID,
		&i.Name,
		&i.VersionTimestamp,
		&i.PolicyBundle,
		&i.Signature,
		&i.SigningKeyID,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const deletePolicy = `-- name: DeletePolicy :exec
DELETE FROM policies
WHERE policy_id = $1
`

func (q *Queries) DeletePolicy(ctx context.Context, policyID string) error {
	_, err := q.db.Exec(ctx, deletePolicy, policyID)
	return err
}

const getLatestPolicyByTenant = `-- name: GetLatestPolicyByTenant :one
SELECT id, policy_id, tenant_id, name, version_timestamp, policy_bundle, signature, signing_key_id, created_at, created_by FROM policies
WHERE tenant_id = $1
ORDER BY version_timestamp DESC
LIMIT 1
`

func (q *Queries) GetLatestPolicyByTenant(ctx context.Context, tenantID pgtype.UUID) (Policy, error) {
	row := q.db.QueryRow(ctx, getLatestPolicyByTenant, tenantID)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.PolicyID,
		&i.TenantID,
		&i.Name,
		&i.VersionTimestamp,
		&i.PolicyBundle,
		&i.Signature,
		&i.SigningKeyID,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getPolicyByID = `-- name: GetPolicyByID :one
SELECT id, policy_id, tenant_id, name, version_timestamp, policy_bundle, signature, signing_key_id, created_at, created_by FROM policies
WHERE policy_id = $1
`

func (q *Queries) GetPolicyByID(ctx context.Context, policyID string) (Policy, error) {
	row := q.db.QueryRow(ctx, getPolicyByID, policyID)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.PolicyID,
		&i.TenantID,
		&i.Name,
		&i.VersionTimestamp,
		&i.PolicyBundle,
		&i.Signature,
		&i.SigningKeyID,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const listPoliciesByTenant = `-- name: ListPoliciesByTenant :many
SELECT id, policy_id, tenant_id, name, version_timestamp, policy_bundle, signature, signing_key_id, created_at, created_by FROM policies
WHERE tenant_id = $1
ORDER BY version_timestamp DESC
LIMIT $2 OFFSET $3
`

type ListPoliciesByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListPoliciesByTenant(ctx context.Context, arg ListPoliciesByTenantParams) ([]Policy, error) {
	rows, err := q.db.Query(ctx, listPoliciesByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Policy{}
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.PolicyID,
			&i.TenantID,
			&i.Name,
			&i.VersionTimestamp,
			&i.PolicyBundle,
			&i.Signature,
			&i.SigningKeyID,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePolicy = `-- name: UpdatePolicy :one
UPDATE policies
SET
    name = $2,
    version_timestamp = $3,
    policy_bundle = $4,
    signature = $5,
    signing_key_id = $6
WHERE policy_id = $1
RETURNING id, policy_id, tenant_id, name, version_timestamp, policy_bundle, signature, signing_key_id, created_at, created_by
`

type UpdatePolicyParams struct {
	PolicyID         string             `json:"policy_id"`
	Name             string             `json:"name"`
	VersionTimestamp pgtype.Timestamptz `json:"version_timestamp"`
	PolicyBundle     []byte             `json:"policy_bundle"`
	Signature        *string            `json:"signature"`
	SigningKeyID     *string            `json:"signing_key_id"`
}

func (q *Queries) UpdatePolicy(ctx context.Context, arg UpdatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, updatePolicy,
		arg.PolicyID,
		arg.Name,
		arg.VersionTimestamp,
		arg.PolicyBundle,
		arg.Signature,
		arg.SigningKeyID,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.PolicyID,
		&i.TenantID,
		&i.Name,
		&i.VersionTimestamp,
		&i.PolicyBundle,
		&i.Signature,
		&i.SigningKeyID,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
