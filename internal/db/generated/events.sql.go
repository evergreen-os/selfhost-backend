// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEventsByDevice = `-- name: CountEventsByDevice :one
SELECT COUNT(*) FROM events
WHERE device_id = $1
`

func (q *Queries) CountEventsByDevice(ctx context.Context, deviceID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countEventsByDevice, deviceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    event_id,
    device_id,
    event_type,
    event_level,
    message,
    metadata,
    user_id,
    app_id,
    policy_id,
    error_details,
    duration_ms,
    event_timestamp
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, event_id, device_id, event_type, event_level, message, metadata, user_id, app_id, policy_id, error_details, duration_ms, event_timestamp, received_at
`

type CreateEventParams struct {
	EventID        string             `json:"event_id"`
	DeviceID       pgtype.UUID        `json:"device_id"`
	EventType      string             `json:"event_type"`
	EventLevel     string             `json:"event_level"`
	Message        string             `json:"message"`
	Metadata       []byte             `json:"metadata"`
	UserID         *string            `json:"user_id"`
	AppID          *string            `json:"app_id"`
	PolicyID       *string            `json:"policy_id"`
	ErrorDetails   *string            `json:"error_details"`
	DurationMs     *int64             `json:"duration_ms"`
	EventTimestamp pgtype.Timestamptz `json:"event_timestamp"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.EventID,
		arg.DeviceID,
		arg.EventType,
		arg.EventLevel,
		arg.Message,
		arg.Metadata,
		arg.UserID,
		arg.AppID,
		arg.PolicyID,
		arg.ErrorDetails,
		arg.DurationMs,
		arg.EventTimestamp,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.DeviceID,
		&i.EventType,
		&i.EventLevel,
		&i.Message,
		&i.Metadata,
		&i.UserID,
		&i.AppID,
		&i.PolicyID,
		&i.ErrorDetails,
		&i.DurationMs,
		&i.EventTimestamp,
		&i.ReceivedAt,
	)
	return i, err
}

const deleteOldEvents = `-- name: DeleteOldEvents :exec
DELETE FROM events
WHERE event_timestamp < $1
`

func (q *Queries) DeleteOldEvents(ctx context.Context, eventTimestamp pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteOldEvents, eventTimestamp)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, event_id, device_id, event_type, event_level, message, metadata, user_id, app_id, policy_id, error_details, duration_ms, event_timestamp, received_at FROM events
WHERE event_id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, eventID string) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, eventID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.DeviceID,
		&i.EventType,
		&i.EventLevel,
		&i.Message,
		&i.Metadata,
		&i.UserID,
		&i.AppID,
		&i.PolicyID,
		&i.ErrorDetails,
		&i.DurationMs,
		&i.EventTimestamp,
		&i.ReceivedAt,
	)
	return i, err
}

const listEventsByDevice = `-- name: ListEventsByDevice :many
SELECT id, event_id, device_id, event_type, event_level, message, metadata, user_id, app_id, policy_id, error_details, duration_ms, event_timestamp, received_at FROM events
WHERE device_id = $1
ORDER BY event_timestamp DESC
LIMIT $2 OFFSET $3
`

type ListEventsByDeviceParams struct {
	DeviceID pgtype.UUID `json:"device_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListEventsByDevice(ctx context.Context, arg ListEventsByDeviceParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByDevice, arg.DeviceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.DeviceID,
			&i.EventType,
			&i.EventLevel,
			&i.Message,
			&i.Metadata,
			&i.UserID,
			&i.AppID,
			&i.PolicyID,
			&i.ErrorDetails,
			&i.DurationMs,
			&i.EventTimestamp,
			&i.ReceivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByTenant = `-- name: ListEventsByTenant :many
SELECT e.id, e.event_id, e.device_id, e.event_type, e.event_level, e.message, e.metadata, e.user_id, e.app_id, e.policy_id, e.error_details, e.duration_ms, e.event_timestamp, e.received_at FROM events e
JOIN devices d ON e.device_id = d.id
WHERE d.tenant_id = $1
ORDER BY e.event_timestamp DESC
LIMIT $2 OFFSET $3
`

type ListEventsByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListEventsByTenant(ctx context.Context, arg ListEventsByTenantParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.DeviceID,
			&i.EventType,
			&i.EventLevel,
			&i.Message,
			&i.Metadata,
			&i.UserID,
			&i.AppID,
			&i.PolicyID,
			&i.ErrorDetails,
			&i.DurationMs,
			&i.EventTimestamp,
			&i.ReceivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByType = `-- name: ListEventsByType :many
SELECT e.id, e.event_id, e.device_id, e.event_type, e.event_level, e.message, e.metadata, e.user_id, e.app_id, e.policy_id, e.error_details, e.duration_ms, e.event_timestamp, e.received_at FROM events e
JOIN devices d ON e.device_id = d.id
WHERE d.tenant_id = $1 AND e.event_type = $2
ORDER BY e.event_timestamp DESC
LIMIT $3 OFFSET $4
`

type ListEventsByTypeParams struct {
	TenantID  pgtype.UUID `json:"tenant_id"`
	EventType string      `json:"event_type"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) ListEventsByType(ctx context.Context, arg ListEventsByTypeParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByType,
		arg.TenantID,
		arg.EventType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.DeviceID,
			&i.EventType,
			&i.EventLevel,
			&i.Message,
			&i.Metadata,
			&i.UserID,
			&i.AppID,
			&i.PolicyID,
			&i.ErrorDetails,
			&i.DurationMs,
			&i.EventTimestamp,
			&i.ReceivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
