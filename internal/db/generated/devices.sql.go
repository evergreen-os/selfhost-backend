// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: devices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
    device_id,
    tenant_id,
    device_token_hash,
    status,
    hardware_model,
    hardware_manufacturer,
    hardware_serial_number,
    hardware_architecture,
    hardware_total_memory_bytes,
    hardware_total_storage_bytes,
    hardware_tpm_enabled,
    hardware_tpm_version,
    os_name,
    os_version,
    os_kernel_version,
    os_build_id,
    network_hostname,
    network_primary_mac,
    agent_version,
    agent_commit,
    enrolled_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21
) RETURNING id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at
`

type CreateDeviceParams struct {
	DeviceID                  string             `json:"device_id"`
	TenantID                  pgtype.UUID        `json:"tenant_id"`
	DeviceTokenHash           string             `json:"device_token_hash"`
	Status                    string             `json:"status"`
	HardwareModel             *string            `json:"hardware_model"`
	HardwareManufacturer      *string            `json:"hardware_manufacturer"`
	HardwareSerialNumber      *string            `json:"hardware_serial_number"`
	HardwareArchitecture      *string            `json:"hardware_architecture"`
	HardwareTotalMemoryBytes  *int64             `json:"hardware_total_memory_bytes"`
	HardwareTotalStorageBytes *int64             `json:"hardware_total_storage_bytes"`
	HardwareTpmEnabled        *bool              `json:"hardware_tpm_enabled"`
	HardwareTpmVersion        *string            `json:"hardware_tpm_version"`
	OsName                    *string            `json:"os_name"`
	OsVersion                 *string            `json:"os_version"`
	OsKernelVersion           *string            `json:"os_kernel_version"`
	OsBuildID                 *string            `json:"os_build_id"`
	NetworkHostname           *string            `json:"network_hostname"`
	NetworkPrimaryMac         *string            `json:"network_primary_mac"`
	AgentVersion              *string            `json:"agent_version"`
	AgentCommit               *string            `json:"agent_commit"`
	EnrolledAt                pgtype.Timestamptz `json:"enrolled_at"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.DeviceID,
		arg.TenantID,
		arg.DeviceTokenHash,
		arg.Status,
		arg.HardwareModel,
		arg.HardwareManufacturer,
		arg.HardwareSerialNumber,
		arg.HardwareArchitecture,
		arg.HardwareTotalMemoryBytes,
		arg.HardwareTotalStorageBytes,
		arg.HardwareTpmEnabled,
		arg.HardwareTpmVersion,
		arg.OsName,
		arg.OsVersion,
		arg.OsKernelVersion,
		arg.OsBuildID,
		arg.NetworkHostname,
		arg.NetworkPrimaryMac,
		arg.AgentVersion,
		arg.AgentCommit,
		arg.EnrolledAt,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.TenantID,
		&i.DeviceTokenHash,
		&i.Status,
		&i.HardwareModel,
		&i.HardwareManufacturer,
		&i.HardwareSerialNumber,
		&i.HardwareArchitecture,
		&i.HardwareTotalMemoryBytes,
		&i.HardwareTotalStorageBytes,
		&i.HardwareTpmEnabled,
		&i.HardwareTpmVersion,
		&i.OsName,
		&i.OsVersion,
		&i.OsKernelVersion,
		&i.OsBuildID,
		&i.NetworkHostname,
		&i.NetworkPrimaryMac,
		&i.AgentVersion,
		&i.AgentCommit,
		&i.EnrolledAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE device_id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, deviceID string) error {
	_, err := q.db.Exec(ctx, deleteDevice, deviceID)
	return err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at FROM devices
WHERE device_id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, deviceID string) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByID, deviceID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.TenantID,
		&i.DeviceTokenHash,
		&i.Status,
		&i.HardwareModel,
		&i.HardwareManufacturer,
		&i.HardwareSerialNumber,
		&i.HardwareArchitecture,
		&i.HardwareTotalMemoryBytes,
		&i.HardwareTotalStorageBytes,
		&i.HardwareTpmEnabled,
		&i.HardwareTpmVersion,
		&i.OsName,
		&i.OsVersion,
		&i.OsKernelVersion,
		&i.OsBuildID,
		&i.NetworkHostname,
		&i.NetworkPrimaryMac,
		&i.AgentVersion,
		&i.AgentCommit,
		&i.EnrolledAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceByUUID = `-- name: GetDeviceByUUID :one
SELECT id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at FROM devices
WHERE id = $1
`

func (q *Queries) GetDeviceByUUID(ctx context.Context, id pgtype.UUID) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByUUID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.TenantID,
		&i.DeviceTokenHash,
		&i.Status,
		&i.HardwareModel,
		&i.HardwareManufacturer,
		&i.HardwareSerialNumber,
		&i.HardwareArchitecture,
		&i.HardwareTotalMemoryBytes,
		&i.HardwareTotalStorageBytes,
		&i.HardwareTpmEnabled,
		&i.HardwareTpmVersion,
		&i.OsName,
		&i.OsVersion,
		&i.OsKernelVersion,
		&i.OsBuildID,
		&i.NetworkHostname,
		&i.NetworkPrimaryMac,
		&i.AgentVersion,
		&i.AgentCommit,
		&i.EnrolledAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDevicesByStatus = `-- name: ListDevicesByStatus :many
SELECT id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at FROM devices
WHERE tenant_id = $1 AND status = $2
ORDER BY last_seen_at DESC NULLS LAST, created_at DESC
LIMIT $3 OFFSET $4
`

type ListDevicesByStatusParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Status   string      `json:"status"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListDevicesByStatus(ctx context.Context, arg ListDevicesByStatusParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, listDevicesByStatus,
		arg.TenantID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.TenantID,
			&i.DeviceTokenHash,
			&i.Status,
			&i.HardwareModel,
			&i.HardwareManufacturer,
			&i.HardwareSerialNumber,
			&i.HardwareArchitecture,
			&i.HardwareTotalMemoryBytes,
			&i.HardwareTotalStorageBytes,
			&i.HardwareTpmEnabled,
			&i.HardwareTpmVersion,
			&i.OsName,
			&i.OsVersion,
			&i.OsKernelVersion,
			&i.OsBuildID,
			&i.NetworkHostname,
			&i.NetworkPrimaryMac,
			&i.AgentVersion,
			&i.AgentCommit,
			&i.EnrolledAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDevicesByTenant = `-- name: ListDevicesByTenant :many
SELECT id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at FROM devices
WHERE tenant_id = $1
ORDER BY last_seen_at DESC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type ListDevicesByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListDevicesByTenant(ctx context.Context, arg ListDevicesByTenantParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, listDevicesByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.TenantID,
			&i.DeviceTokenHash,
			&i.Status,
			&i.HardwareModel,
			&i.HardwareManufacturer,
			&i.HardwareSerialNumber,
			&i.HardwareArchitecture,
			&i.HardwareTotalMemoryBytes,
			&i.HardwareTotalStorageBytes,
			&i.HardwareTpmEnabled,
			&i.HardwareTpmVersion,
			&i.OsName,
			&i.OsVersion,
			&i.OsKernelVersion,
			&i.OsBuildID,
			&i.NetworkHostname,
			&i.NetworkPrimaryMac,
			&i.AgentVersion,
			&i.AgentCommit,
			&i.EnrolledAt,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeviceLastSeen = `-- name: UpdateDeviceLastSeen :one
UPDATE devices
SET last_seen_at = $2, updated_at = NOW()
WHERE device_id = $1
RETURNING id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at
`

type UpdateDeviceLastSeenParams struct {
	DeviceID   string             `json:"device_id"`
	LastSeenAt pgtype.Timestamptz `json:"last_seen_at"`
}

func (q *Queries) UpdateDeviceLastSeen(ctx context.Context, arg UpdateDeviceLastSeenParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDeviceLastSeen, arg.DeviceID, arg.LastSeenAt)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.TenantID,
		&i.DeviceTokenHash,
		&i.Status,
		&i.HardwareModel,
		&i.HardwareManufacturer,
		&i.HardwareSerialNumber,
		&i.HardwareArchitecture,
		&i.HardwareTotalMemoryBytes,
		&i.HardwareTotalStorageBytes,
		&i.HardwareTpmEnabled,
		&i.HardwareTpmVersion,
		&i.OsName,
		&i.OsVersion,
		&i.OsKernelVersion,
		&i.OsBuildID,
		&i.NetworkHostname,
		&i.NetworkPrimaryMac,
		&i.AgentVersion,
		&i.AgentCommit,
		&i.EnrolledAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeviceStatus = `-- name: UpdateDeviceStatus :one
UPDATE devices
SET status = $2, updated_at = NOW()
WHERE device_id = $1
RETURNING id, device_id, tenant_id, device_token_hash, status, hardware_model, hardware_manufacturer, hardware_serial_number, hardware_architecture, hardware_total_memory_bytes, hardware_total_storage_bytes, hardware_tpm_enabled, hardware_tpm_version, os_name, os_version, os_kernel_version, os_build_id, network_hostname, network_primary_mac, agent_version, agent_commit, enrolled_at, last_seen_at, created_at, updated_at
`

type UpdateDeviceStatusParams struct {
	DeviceID string `json:"device_id"`
	Status   string `json:"status"`
}

func (q *Queries) UpdateDeviceStatus(ctx context.Context, arg UpdateDeviceStatusParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDeviceStatus, arg.DeviceID, arg.Status)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.TenantID,
		&i.DeviceTokenHash,
		&i.Status,
		&i.HardwareModel,
		&i.HardwareManufacturer,
		&i.HardwareSerialNumber,
		&i.HardwareArchitecture,
		&i.HardwareTotalMemoryBytes,
		&i.HardwareTotalStorageBytes,
		&i.HardwareTpmEnabled,
		&i.HardwareTpmVersion,
		&i.OsName,
		&i.OsVersion,
		&i.OsKernelVersion,
		&i.OsBuildID,
		&i.NetworkHostname,
		&i.NetworkPrimaryMac,
		&i.AgentVersion,
		&i.AgentCommit,
		&i.EnrolledAt,
		&i.LastSeenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
